apply plugin: 'com.android.library'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

group = 'com.github.imagekit-developer'

def dagger_version = '2.16'

android {
    namespace = "com.imagekit.android"
    compileSdkVersion 33


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "API_VERSION", "\"1.0.0\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    publishing {
        publications {
            release(MavenPublication) {
                groupId = group
                artifactId = 'imagekit-android'
                version = '2.0.1'

                afterEvaluate {
                    from components.release
                }
            }
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])

    api 'androidx.appcompat:appcompat:1.1.0'
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit:1.0.6'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    testImplementation 'org.mockito:mockito-core:4.2.0'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.7'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    api 'io.reactivex.rxjava2:rxandroid:2.1.1'

    api "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    api "org.jetbrains.kotlin:kotlin-reflect:1.3.50"

    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.12.0'
//    compileOnly 'com.github.pengrad:jdk9-deps:1.0'

    implementation "com.linkedin.android.litr:litr:1.4.16"
}

apply plugin: 'org.jetbrains.dokka'
//

jacoco {
    toolVersion "0.8.8"
}

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*']
    }
    finalizedBy jacocoTestReport
}

tasks.register('jacocoTestCoverageVerification', JacocoCoverageVerification) {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        csv.enabled false
        html.enabled true
        xml.enabled true
    }
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, excludes: [
                '**/R.class',
                '**/BR.class',
                '**/R$*.class',
                '**/*$ViewInjector*.*',
                '**/*$ViewBinder*.*',
                '**/BuildConfig.*',
                'android/**',
                '**/Manifest*.*',
                '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                '**/*Module.*', // Modules for Dagger.
                '**/*Dagger*.*', // Dagger auto-generated code.
                '**/*MembersInjector*.*', // Dagger auto-generated code.
                '**/*_Provide*Factory*.*',
                '**/*_Factory.*', //Dagger auto-generated code
                '**/*$*$*.*' // Anonymous classes generated by kotlin
        ])
    }))
}
// Generated by Dagger (https://google.github.io/dagger).
package com.imagekit.android.injection.component;

import com.imagekit.android.ImageKit;
import com.imagekit.android.ImageKit_MembersInjector;
import com.imagekit.android.data.Repository;
import com.imagekit.android.injection.module.ContextModule;
import com.imagekit.android.injection.module.ContextModule_ProvideContextFactory;
import com.imagekit.android.util.SharedPrefUtil;
import dagger.internal.Preconditions;

public final class DaggerUtilComponent implements UtilComponent {
  private ContextModule contextModule;

  private DaggerUtilComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private SharedPrefUtil getSharedPrefUtil() {
    return new SharedPrefUtil(
        ContextModule_ProvideContextFactory.proxyProvideContext(contextModule));
  }

  private Repository getRepository() {
    return new Repository(
        ContextModule_ProvideContextFactory.proxyProvideContext(contextModule),
        getSharedPrefUtil());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.contextModule = builder.contextModule;
  }

  @Override
  public void inject(ImageKit app) {
    injectImageKit(app);
  }

  private ImageKit injectImageKit(ImageKit instance) {
    ImageKit_MembersInjector.injectMSharedPrefUtil(instance, getSharedPrefUtil());
    ImageKit_MembersInjector.injectMRepository(instance, getRepository());
    return instance;
  }

  public static final class Builder {
    private ContextModule contextModule;

    private Builder() {}

    public UtilComponent build() {
      if (contextModule == null) {
        throw new IllegalStateException(ContextModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerUtilComponent(this);
    }

    public Builder contextModule(ContextModule contextModule) {
      this.contextModule = Preconditions.checkNotNull(contextModule);
      return this;
    }
  }
}
